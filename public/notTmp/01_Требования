Создание одностраничного приложения для создания контактов (SPA)

00) Необходимые инструменты

    PHP фреймворк Laravel
        Провести предварительные настройки фреймворка
            Установака фреймворка
            Настройка конфигурационного файла .env
            Проверка установки laravel-mix
    Javascript фреймворк Vue js
            Установка фреймворка vue js
            Установка vue-router
            Установка axios
            Установка vue-loader
            Проверка всех пакетов для функционирования и взаимодействия фреймворка vue js
    Css фреймворк Bootstrap
            Добавление фреймворка Bootstrap в главный файл index.blade.php
    Сервер баз данных Mysql
            Создание базы данных contacts с кодировкой utf8_general_ci
    Система контроля версий Git
        Инициализация нового локального репозитория

01) Регистрация (выполняется стандартными средствами Laravel)
    Сделать предварительные настройки для осуществления разворачивания стандартной регистрации в фреймворке Laravel
        Установить через композер библиотеку laravel/ui --dev
            composer require laravel/ui --dev

        Выпонить в командной строке команду
            php artisan ui vue --auth

        Применить миграции с помощью команды
            php artisam migrate

    Создание маршрута в роутере vue js - vue router (/register)
    Компонент register (./components/auth/register)
    Взять стандартную вёрстку фреймворка Laravel и адаптировать её для фреймворка vue js
    Вся вёрстка раздела регистрации выполняется в отдельном компоненте (auth/register)
    Добавить в миграцию таблицы users поле token_auth (varchar,250,not null,unique)
    Добавить в контроллер регистрации поля токена
        ['token' => md5(uniqid(rand(), true)) ]
    Добавить в поле availables поле token, чтобы модель User могла внести пользователя в базу данных

    Сделать валидацию данных на стороне фреймворка vue js
        Валидация email пользователя
        Валидация идентичности вводимого пароля.
    Реализовать инструмент вывода предупреждений о неправильности вводимых данных
        Предупреждение alert (bootstrap) и очистка вводимых полей
        После непродолжительной паузы, предупреждение alert должно изчезать.

    ПРОВЕРИТЬ csrf токен для обращения в роутам Laravel.

    Все данные будут передаваться и получаться с помощью ajax (axios POST)

    После проверки валидности вводимых данных осуществить добавление нового пользователя в базу данных и прислать
      ответ от сервера об успешности операции. (Как вариант json)
    После завершения регистрации перенаправить пользователя на страницу с его контактами.
    На которой будет список его контактов, с кнопкой добавления нового контакта
        Если список его контактов пуст, то вывести уведомление о том что список пуст.
    Также на странице формы регистрации должно быть меню с возможность отменить регистрацию
      и вернуться на главную страницу (Bootstrap Navbar)

02) Авторизация
        Создание маршрута в роутере vue js - vue router (/login)
        Компонент login (./components/auth/login)
        Взять стандартную вёрстку фреймворка Laravel и адаптировать её для фреймворка vue js
        Вся вёрстка раздела авторизации выполняется в отдельном компоненте (auth/login)
        Сделать валидацию данных на стороне фреймворка vue js
                Валидация наличия пользователя
                Валидация вводимого пароля.
            Реализовать инструмент вывода предупреждений о неправильности вводимых данных
                Предупреждение alert (bootstrap) и очистка вводимых полей
                После непродолжительной паузы, предупреждение alert должно изчезать.

        После успешной авторизации перенаправить пользователя на страницу с его контактами.

03) Разлогирвание
         Создание маршрута в роутере vue js - vue router (/logout)
         Компонент logout (./components/auth/logout)
         При переходе на компонет logout показать сообщение "You Logout !!!"
         Сделать метод выхода в роутере Laravel logout
         Сделать метод выхода в компонете vue js logout
            Отправить post запрос на роут /logout и разлогировать пользователя.
            Отправить ответ об успешном разлогированнии
         После успешного ответа с сервера, вывести уведомление о том что пользователь вышел из системы.

04) Главная страница
        Создать компонент main (./components/Main.vue)
        Вывод главной страницы будет таким:
            Стандартная трёхколоночная вёрстка bootstrap-а с меню navbar посередине.
        Меню navbar
            Главная (/)
            Мои контакты (/contacts) - (ЕСЛИ ПОЛЬЗОВАТЕЛ АВТОРИЗИОВАН - ПРОВЕРИТЬ ЭТО В МЕТОДЕ beforeMount())
            Мои логи (/logs) - (ЕСЛИ ПОЛЬЗОВАТЕЛ АВТОРИЗИОВАН - ПРОВЕРИТЬ ЭТО В МЕТОДЕ beforeMount())
        При клике по ссылке /contacts и попытке попасть на маршрут (/contacts)
            должна производиться проверка прав доступа пользователя (аутентификация)
        При нахождении на компоненте contacts должна осуществляться проверка прав доступа пользователя
            до момента загрузки компонета в методе beforeMount()
        Если у пользователя нет прав доступа, то должно быть выведено алерт уведомление о том что пользователь не авторизирован,
            и должна быть переадресация на главную старницу.

05) Страница контактов пользователя с тремя вкладками для манипуляции со своими контактами
        Создание маршрута в роутере vue js - vue router (/contacts)
        Компонент index (./components/contacts/index)
            Вкладка (компонент) - show - просмотр всех контактов (/contacts/show) с пагинацией
            Вкладка (компонент) - create - добавление новых контактов (/contacts/append)
            Вкладка (компонент) - update - редакторивание контактов (/contacts/update)
                также во вкладке update сделать удление контактов

06) Просмотр своих записей (/contacts/view)
        Создание маршрута в роутере vue js - vue router (/contacts/show)
        Компонент show (./components/contacts/show)
        Вывод всех записей пользователя в виде таблицы с пагинацией,
            по 20 записей
        Сделать иконки для перехода на страницу редактирования и удаления своих контактов

07) Добавление контактов
        Создание маршрута в роутере vue js - vue router (/contacts/show)
        Компонент create (./components/contacts/create)
        Форма bootstrap с полями для добавления контакта
            Поле Name (input text)
            Поле Second name (input text)
            Поле Phone (input tel)
            Поле Comment (textarea)

        Валидация на стороне фреймворка vue js
            Вывод уведомлений (alert bootstrap)
        Валидация на стороне фреймворка Laravel
            ответ от сервера
                https://stackoverflow.com/questions/32555058/laravel-5-validation-return-as-json-ajax
        При правильности всех данных добавить контакт в базу данных и переадресовать на страницу просмотра контактов

08) Редактирование контактов
        Создание маршрута в роутере vue js - vue router (/contacts/edit)
        Компонент update (./components/contacts/update)
        При попадании на компонент update выбирается запись редактируемого контакта по id из базы данных в методе beforeMount()
        Форма для редактирования контактов такая же как и форма создания контактов с подстановленными значениями
            из ответа сервера со стороны php.
        Валидация на стороне фреймворка vue js
              Вывод уведомлений (alert bootstrap)
        Валидация на стороне фреймворка Laravel
              ответ от сервера
                 https://stackoverflow.com/questions/32555058/laravel-5-validation-return-as-json-ajax

        При правильности всех данных обновить контакт в базе данных и переадресовать на страницу просмотра контактов

09) Создать маршрут в роутере фреймворка Laravel
         Route::resource(ContactsController)
    Создать контроллер ресурсов ContactsController

10) Просмотр истории логов
         Создание маршрута в роутере vue js - vue router (/logs)
         Компонент logs (./components/logs)
         При попадании в компонент logs  выводится список логов из базы данных в виде таблицы,
           предварительно загруженный из метода beforeMount()
         Колонки таблицы для логов:
            Дата и время совершённой операции
            Событие операции (см. ниже)
            Результат операции

         Логи будут вестить при следующих операциях
            Регистрация пользователя (Регистрация)
            Вход пользователя (Авторизиция)
            Добавление нового конитакта
            Редактирование контакта
            Удаление контакта

         Кнопка (и метод) загрузки всех логов в файл csv




















